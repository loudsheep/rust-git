use std::fs;

use anyhow::{Result};

use crate::git::{
    objects::{GitObject, GitObjectType, GitTag, object_find, object_write},
    refs::ref_create,
    repo::repo_find,
};

pub fn list_tags() -> Result<()> {
    let repo = repo_find(".", true)?.unwrap();

    let tags_dir = repo.gitdir.join("refs").join("tags");
    if !tags_dir.exists() {
        return Ok(());
    }

    for entry in fs::read_dir(&tags_dir)? {
        let entry = entry?;
        let path = entry.path();

        if path.is_file() {
            println!("{}", entry.file_name().to_string_lossy());
        }
    }

    Ok(())
}

pub fn create_tag(name: &str, target: &str, create_tag_object: bool) -> Result<()> {
    let repo = repo_find(".", true)?.unwrap();

    let sha = object_find(&repo, target, &GitObjectType::Tag);

    if create_tag_object {
        let mut tag = GitTag::init()?;

        tag.kvlm
            .headers
            .push((b"object".to_vec(), sha.as_bytes().to_vec()));
        tag.kvlm
            .headers
            .push((b"type".to_vec(), b"commit".to_vec()));
        tag.kvlm
            .headers
            .push((b"tag".to_vec(), name.as_bytes().to_vec()));
        tag.kvlm
            .headers
            .push((b"tagger".to_vec(), b"Wyag <wyag@example.com>".to_vec()));
        tag.kvlm.headers.push((
            Vec::new(), // None key in Python = message
            b"A tag generated by rust-git\n".to_vec(),
        ));

        let tag_sha = object_write(&repo, &tag, &GitObjectType::Tag, true)?;

        ref_create(&repo, &format!("tags/{}", name), &tag_sha)?;
    } else {
        ref_create(&repo, &format!("tags/{}", name), &sha)?;
    }

    Ok(())
}
